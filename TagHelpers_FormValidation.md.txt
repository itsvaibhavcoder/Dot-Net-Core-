# Tag Helpers and Form Validation in ASP.NET Core MVC

## 1. Tag Helpers
**Tag Helpers** are used in ASP.NET Core MVC to integrate server-side logic into HTML elements in Razor views.

### Basic Concept
- They look like standard HTML but are processed on the server.
- They replace traditional HTML Helpers like `@Html.TextBoxFor`.
- They make code more readable and maintainable.

### Common Tag Helpers
1. **Anchor Tag Helper (`<a asp-action="">`)**
   ```html
   <a asp-controller="Home" asp-action="Index">Go to Home</a>
   ```

2. **Form Tag Helper (`<form asp-action="">`)**
   ```html
   <form asp-controller="Account" asp-action="Login" method="post"></form>
   ```

3. **Input Tag Helper (`<input asp-for="">`)**
   ```html
   <input asp-for="Email" class="form-control" />
   ```

4. **Validation Tag Helpers**
   ```html
   <span asp-validation-for="Email" class="text-danger"></span>
   ```

---

## 2. Form Validation in ASP.NET Core MVC
Validation ensures that users enter correct data before submitting a form.

### Using Data Annotations
```csharp
public class User
{
    [Required(ErrorMessage = "Name is required")]
    [StringLength(50, MinimumLength = 3)]
    public string Name { get; set; }

    [Required]
    [EmailAddress]
    public string Email { get; set; }

    [Required]
    [MinLength(6)]
    public string Password { get; set; }
}
```

### Implementing Validation in Views
```html
<form asp-action="Register" method="post">
    <div>
        <label asp-for="Name"></label>
        <input asp-for="Name" class="form-control" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>

    <div>
        <label asp-for="Email"></label>
        <input asp-for="Email" class="form-control" />
        <span asp-validation-for="Email" class="text-danger"></span>
    </div>

    <button type="submit">Register</button>
</form>
```

### Handling Validation in the Controller
```csharp
[HttpPost]
public IActionResult Register(User user)
{
    if (ModelState.IsValid)
    {
        return RedirectToAction("Success");
    }
    return View(user);
}
```

### Enabling Client-Side Validation
Include these scripts:
```html
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.11/jquery.validate.unobtrusive.min.js"></script>
```

### Custom Validation Attribute
```csharp
public class MinimumAgeAttribute : ValidationAttribute
{
    private readonly int _minAge;
    public MinimumAgeAttribute(int minAge) { _minAge = minAge; }

    protected override ValidationResult IsValid(object value, ValidationContext validationContext)
    {
        if (value is DateTime birthDate)
        {
            int age = DateTime.Today.Year - birthDate.Year;
            return age >= _minAge ? ValidationResult.Success : new ValidationResult($"You must be at least {_minAge} years old.");
        }
        return new ValidationResult("Invalid date format");
    }
}
```

### Summary
| Feature | Tag Helpers | Form Validation |
|---------|------------|----------------|
| Purpose | Enhances HTML with ASP.NET features | Ensures valid input |
| Syntax | `<input asp-for="Name" />` | `[Required] public string Name { get; set; }` |
| Client-Side | No JavaScript required | Uses jQuery Validation |
| Server-Side | Generates dynamic content | Uses `ModelState.IsValid` |

---

### ðŸš€ ASP.NET Core makes form handling simple and powerful! 
